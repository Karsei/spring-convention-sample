plugins {
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group = 'kr.pe.karsei'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework.data:spring-data-commons'

    // Swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.12'

    // Google Guava for checking naming convention
    implementation 'com.google.guava:guava:33.0.0-jre'
}

tasks.named('test') {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

//if (project.hasProperty('ldapUsername') && project.hasProperty('ldapPassword')) {
//    publishing {
//        publications {
//            maven(MavenPublication) {
//                from components.java
//                artifact sourceJar
//                versionMapping {
//                    usage('java-api') {
//                        fromResolutionOf('runtimeClasspath')
//                    }
//                    usage('java-runtime') {
//                        fromResolutionResult()
//                    }
//                }
//            }
//        }
//        repositories {
//            maven {
//                url repoUrl
//                allowInsecureProtocol(true)
//                credentials {
//                    username = project.property('ldapUsername')
//                    password = project.property('ldapPassword')
//                }
//            }
//        }
//    }
//}

bootJar.enabled(false)
jar {
    enabled = true
    // *plain 삭제
    archiveClassifier.set("")
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'